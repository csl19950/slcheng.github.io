<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Sholto&#39;s Blog</title>
    <link>https://github.com/csl19950/slcheng.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>My first web blog for a C++ programmer</description>
    <pubDate>Thu, 18 Jan 2018 11:02:21 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>软件开发模式</title>
      <link>https://github.com/csl19950/slcheng.github.io/2018/01/18/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F/</link>
      <guid>https://github.com/csl19950/slcheng.github.io/2018/01/18/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F/</guid>
      <pubDate>Thu, 18 Jan 2018 11:01:59 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;软件开发模式&quot;&gt;&lt;a href=&quot;#软件开发模式&quot; class=&quot;headerlink&quot; title=&quot;软件开发模式&quot;&gt;&lt;/a&gt;软件开发模式&lt;/h1&gt;&lt;h2 id=&quot;CNCC的开发流程：&quot;&gt;&lt;a href=&quot;#CNCC的开发流程：&quot; class=&quot;headerli
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="软件开发模式"><a href="#软件开发模式" class="headerlink" title="软件开发模式"></a>软件开发模式</h1><h2 id="CNCC的开发流程："><a href="#CNCC的开发流程：" class="headerlink" title="CNCC的开发流程："></a>CNCC的开发流程：</h2><p>​    人行支付司汇集参与者（银行）的需求，然后通过与清算中心、计管部讨论以及征求参与者的意见，统一出需求（需求）。然后开发中心和支付司对需求进行设计修改，最终定型（设计）。然后开发中心负责软件的开发（制造）。待开发完成后，开发人员进行单元和组装测试；通过之后交予测试部门先进行准入测试，在通过率达到98%后进行实验室测试；在进行实验室测试的过程中，开发人员和测试人员需要经常就问题进行探讨交流，以达到软件的功能细节需求。待所有测试完成后，将软件（一般是补丁）安装于CNAPS2联调测试环境上，通知参与者(需要使用新补丁功能的金融机构)参与相关业务功能的测试，完成之后，需要各参与者将测试的案例总和并将结果交予开发中心，将软件布置于生产环境上（真正的CNAPS2环境），上线，完成。</p><p>​    CNAPS2目前是HVPS(大额)基于SAPS(账户系统)；IBPS(网银)和BEPS(小额)基于NETS(轧差系统)</p><pre><code>发布的单项产品一般会包含一个业务系统补丁，一个账务系统补丁，一个主机系统补丁。如果是组合项目则会有多个单项产品发布。</code></pre><p>​    CNCC的开发模式是较为典型的瀑布模式，但是因为同时有多个项目进行，所以可以较为充分的分发任务，一定程度上减少了浪费。</p><hr><h2 id="一、瀑布模型（waterfall）"><a href="#一、瀑布模型（waterfall）" class="headerlink" title="一、瀑布模型（waterfall）"></a>一、瀑布模型（waterfall）</h2><p>​    瀑布模型就是软件开发是按照一定顺序展开的。</p><p>​    需求—&gt;设计—-&gt;制造—-&gt;测试</p><p>​    每个开发者仅负责一部分工作。</p><p>​    缺点：如果上游的工作未完成，则下游的工作无法开展。工期较长</p><p>​    优点：一次性交付，交付的时候达成了所有需求</p><hr><h2 id="二、敏捷开发"><a href="#二、敏捷开发" class="headerlink" title="二、敏捷开发"></a>二、敏捷开发</h2><p>​    以用户需求为核心，采用迭代的方法进行开发。软件项目分为多个子项目，各个子项目的成果都经过测试。可视、可集成、可运行。</p><p>​    把一个大项目分为多个相互联系且独立运行的小项目。</p><p>​    在开发过程中，客户不断的修改需求</p><p>​    敏捷开发可以看作是数据结构的图，生产不再是线性的，而是分布式的</p><hr><h2 id="三、看板开发"><a href="#三、看板开发" class="headerlink" title="三、看板开发"></a>三、看板开发</h2><p>​    一般通过可视化软件。</p><p>​    在敏捷开发的基础上增加了流程控制。</p><p>​    为了达到及时生产、解决敏捷开发带来的混乱问题</p><p>​    可以使信息流程缩短、配合定量、固定标准，使开发更加顺利</p><hr><h2 id="四、SCRUM开发"><a href="#四、SCRUM开发" class="headerlink" title="四、SCRUM开发"></a>四、SCRUM开发</h2><p>​    基于敏捷开发，在其基础之上合理配置了相关人员对其开发流程进行控制，从而达到提高开发效率的目的。</p><p>包含：</p><p>①产品负责人（product owner）：负责维护订单</p><p>②scrum主管（scrum master）：负责整个scrum过程，保证工作时间和计划</p><p>③开发团队（team）：在scrum过程中，团队会进行冲刺，一般为几周，这个过程一般是为了完成一个重要功能</p><hr><h2 id="五、精益软件开发（minimum-viable-product）"><a href="#五、精益软件开发（minimum-viable-product）" class="headerlink" title="五、精益软件开发（minimum viable product）"></a>五、精益软件开发（minimum viable product）</h2><p>​    一切为了节约时间和成本。</p><p>​    在必要的时候，安装需求，仅生产必要的产品（仅开发必要的功能），杜绝浪费。</p><p>​    优先开发出一个产品原型，满足客户的基本需求。后续再根据需求进行更改</p><hr><h2 id="六、目前市面上软件开发模式以瀑布开发和敏捷开发为主"><a href="#六、目前市面上软件开发模式以瀑布开发和敏捷开发为主" class="headerlink" title="六、目前市面上软件开发模式以瀑布开发和敏捷开发为主"></a>六、目前市面上软件开发模式以瀑布开发和敏捷开发为主</h2>]]></content:encoded>
      
      <comments>https://github.com/csl19950/slcheng.github.io/2018/01/18/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F/#disqus_thread</comments>
    </item>
    
    <item>
      <title>MySQL的limit</title>
      <link>https://github.com/csl19950/slcheng.github.io/2018/01/18/MySQL%E7%9A%84limit/</link>
      <guid>https://github.com/csl19950/slcheng.github.io/2018/01/18/MySQL%E7%9A%84limit/</guid>
      <pubDate>Thu, 18 Jan 2018 10:17:51 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;MySQL的limit用法&quot;&gt;&lt;a href=&quot;#MySQL的limit用法&quot; class=&quot;headerlink&quot; title=&quot;MySQL的limit用法&quot;&gt;&lt;/a&gt;MySQL的limit用法&lt;/h1&gt;&lt;p&gt;limit子句用于强制select语句返回的指定记录
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="MySQL的limit用法"><a href="#MySQL的limit用法" class="headerlink" title="MySQL的limit用法"></a>MySQL的limit用法</h1><p>limit子句用于强制select语句返回的指定记录数。可以接受1到2个数字参数，参数必须是一个整数常量。</p><p>例子的数据库如下：</p><p><img src="C:\Users\slcheng\.ssh\slcheng\source\images\mysql\1.jpg" alt="Alt text"></p><h2 id="一、限制位置和显示条数（2个数字参数）"><a href="#一、限制位置和显示条数（2个数字参数）" class="headerlink" title="一、限制位置和显示条数（2个数字参数）"></a>一、限制位置和显示条数（2个数字参数）</h2><p>limit 起始位置(0开始算),显示条数;</p><p>例子:SELECT * FROM <code>dd</code> limit 1,5 ;</p><p><img src="C:\Users\slcheng\.ssh\slcheng\source\images\mysql\2.jpg" alt="Alt text"></p><p>​    偏移起始位置是1,由于是从0开始算起的所以真正的起始位置是2,后面的5代表显示5条记录。即显示2，3，4，5，6条记录</p><p>​    即limit字句：SELECT * FROM table limit n,m ;</p><p>​    实际显示的是n+1到n+m及其之间的数据记录</p><h2 id="二、限制显示条数（1个数字参数）"><a href="#二、限制显示条数（1个数字参数）" class="headerlink" title="二、限制显示条数（1个数字参数）"></a>二、限制显示条数（1个数字参数）</h2><p>limit  显示条数；</p><p>例子：SELECT * FROM ‘dd’ limit 5;</p><p><img src="C:\Users\slcheng\.ssh\slcheng\source\images\mysql\3.jpg" alt="Alt text"></p><p>​                            <img src="C:\Users\slcheng\.ssh\slcheng\source\images\mysql\4.jpg" alt="Alt text"></p><p>​    显示前5条select的结果集</p><p>​    即limit字句：SELECT * FROM table limit n;</p><p>​    实际上等价于：SELECT * FROM table limit 0,n;</p><h2 id="三、特殊技巧（从某个位置显示到select的结果集的末尾）"><a href="#三、特殊技巧（从某个位置显示到select的结果集的末尾）" class="headerlink" title="三、特殊技巧（从某个位置显示到select的结果集的末尾）"></a>三、特殊技巧（从某个位置显示到select的结果集的末尾）</h2><p>​    limit子句包含两个数字参数，第二个参数为-1，代表显示到最后一个结果</p><p>①查询最后一条记录：  SELECT * FROM table order by PK desc limit 1;</p><p>例：按id排序，查询最后一条记录</p><p><img src="C:\Users\slcheng\.ssh\slcheng\source\images\mysql\5.jpg" alt="Alt text"></p><p>②查询第N条记录：SELECT * FROM table limit n-1,1;</p><p>例：查询第4条记录：</p><p><img src="C:\Users\slcheng\.ssh\slcheng\source\images\mysql\6.jpg" alt="Alt text"></p><p>③查询倒数第N条记录：SELECT * FROM table order by PK desc limit n-1,1;</p><p>例：查询倒数第4条记录：</p><p><img src="C:\Users\slcheng\.ssh\slcheng\source\images\mysql\7.jpg" alt="Alt text"></p><p>④随机获取N条记录：SELECT * FROM table order by Rand()  limit n;</p><p>例：随机获取5条记录：</p><p><img src="C:\Users\slcheng\.ssh\slcheng\source\images\mysql\8.jpg" alt="Alt text"></p><p>⑤x表示每页显示的记录条数，y表示页码</p><p>实现分页功能，返回第y页，每页条数为x（即显示第y页的记录）：SELECT <em> FROM table limit (y-1)</em>x,x;</p><p>注释：第y页前面有y-1页记录，即前面总共有(y-1)*x条记录。</p><p>例：返回第3页，每页显示2条记录</p><p><img src="C:\Users\slcheng\.ssh\slcheng\source\images\mysql\9.jpg" alt="Alt text"></p><p>⑤很多博客上有介绍limit子句的第二个参数如果设为-1可以查询到结束，但是我的MySQL版本不支持此种用法，所以持保留观点，可以使用特殊技巧③。(我的MySQL版本为5.6.38)</p><p><img src="C:\Users\slcheng\.ssh\slcheng\source\images\mysql\10.jpg" alt="Alt text"></p><p><img src="C:\Users\slcheng\.ssh\slcheng\source\images\mysql\11.jpg" alt="Alt text"></p><h2 id="四、limit和offset连用-limit后接读取条数，offset后接偏移量"><a href="#四、limit和offset连用-limit后接读取条数，offset后接偏移量" class="headerlink" title="四、limit和offset连用(limit后接读取条数，offset后接偏移量)"></a>四、limit和offset连用(limit后接读取条数，offset后接偏移量)</h2><p>select * from table limit 2 offset 1;</p><p>从偏移量为1开始读取两条数据，即读取2，3两条数据</p><p>select * from table limit 2,1;</p><p>从偏移量为2开始，读取一条数据，即读取第3条数据</p><p>总结：如果需要从第n条(自然顺序，非偏移量顺序)开始读取m条数据</p><p>①select * from table limit n-1,m;</p><p>②select * from table limit m offset n-1;</p><p>即：将limit后接的两个参数互换再在参数之间加上offset所得到的limit offset子句所实现的功能等于最初的limit；反正，若将limit offset子句之间的两个参数互换位置，并删掉offset关键字，所得到的limit子句所实现的功能和最初的limit offset子句相同</p><p><img src="C:\Users\slcheng\.ssh\slcheng\source\images\mysql\12.jpg" alt="Alt text"></p><h2 id="五、limit子句优化相关"><a href="#五、limit子句优化相关" class="headerlink" title="五、limit子句优化相关"></a>五、limit子句优化相关</h2><p>在offset(偏移量)较小时，花费时间较少，可以直接使用limit</p><p>在offset较大时，直接使用limit所花费的时间较多，需要进行优化</p><p>在select时使用索引能有效提高效率，如果只查找索引列，直接使用查询语句即可</p><p>例：select id from dd limit 1000000,20;</p><p>还可以采用自增主键进行优化：</p><p>1.创建临时表(含自增主键)；2.插入查询结果到临时表；3.分多次查询临时表</p><p>如果查找全部列，则可以使用索引&gt;=(即where)的形式或者利用join</p><p>原语句：select * from dd limit 1000000,20;</p><p>优化方法1：select * from dd where id&gt;(select id from dd limit 1000000,1) limit 20;(索引&gt;=)</p><p>优化方法2：select * from dd a join(select id from dd limit 1000000,20) b on a.id=b.id;(join)</p><h2 id="六、limit分页优化方法"><a href="#六、limit分页优化方法" class="headerlink" title="六、limit分页优化方法"></a>六、limit分页优化方法</h2><p>1.子查询优化法</p><p>先找出第一条数据，然后大于等于这条数据的id就是要获取的数据</p><pre><code>缺点：数据必须是连续的，可以说不能有where条件，where条件会筛选数据，导致数据失去连续性</code></pre><p>2.倒排表优化法(缺点明显，很少使用)</p><p> 倒排表法类似建立索引，用一张表来维护页数，然后通过高效的连接得到数据</p><pre><code>缺点：只适合数据数固定的情况，数据不能删除，维护页表困难</code></pre><p>3.反向查找优化法(很麻烦，基本不用)</p><pre><code>当偏移超过一半记录数的时候，先用倒序排序，这样偏移就反转了(相当于只查一半的偏移量) 缺点：order by优化比较麻烦，要增加索引，索引影响数据的修改效率，并且要知道总记录数 ，偏移大于数据的一半</code></pre><p>4.limit限制优化法：把limit的偏移量限制低于某个数，超过这个数就没有数据</p><p>5.只查询索引法：即只查询索引字段的方法</p>]]></content:encoded>
      
      <comments>https://github.com/csl19950/slcheng.github.io/2018/01/18/MySQL%E7%9A%84limit/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Welcome</title>
      <link>https://github.com/csl19950/slcheng.github.io/2018/01/16/Welcome/</link>
      <guid>https://github.com/csl19950/slcheng.github.io/2018/01/16/Welcome/</guid>
      <pubDate>Tue, 16 Jan 2018 03:06:07 GMT</pubDate>
      <description>
      
      </description>
      
      <comments>https://github.com/csl19950/slcheng.github.io/2018/01/16/Welcome/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://github.com/csl19950/slcheng.github.io/2018/01/16/hello-world/</link>
      <guid>https://github.com/csl19950/slcheng.github.io/2018/01/16/hello-world/</guid>
      <pubDate>Tue, 16 Jan 2018 02:51:59 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
        
      
      </description>
      
      <content:encoded><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content:encoded>
      
      <comments>https://github.com/csl19950/slcheng.github.io/2018/01/16/hello-world/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
